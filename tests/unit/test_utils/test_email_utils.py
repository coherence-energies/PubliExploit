# test_email_utils.py
import unittest
import os
from email.mime.multipart import MIMEMultipart
from unittest.mock import MagicMock, patch
from email.parser import BytesParser
from email.message import EmailMessage
from CEpublicationEXPL.src.utils.email_utils import extract_email_body, decode_email_subject, fetch_emails_since_last_check, is_email_valid, send_email

class TestEmailUtils(unittest.TestCase):

    def setUp(self):
        # Créer un e-mail mock sous forme de fichier .eml
        self.eml_file_path = "/home/ubuntu/CEpublicationEXPL/tests/fixtures/sample_emails/sample_email.eml"
        self.num_boucle = "test_numboucle"
        self.periode = "test_date1_date2"
        
    def test_extract_email_body(self):
        with open(self.eml_file_path, 'rb') as eml_file:
            # Utiliser BytesParser pour parser le fichier .eml
            eml_message = BytesParser().parse(eml_file)
            body = extract_email_body(eml_message, self.num_boucle, self.periode)
            # Vérifier si le corps de l'e-mail est extrait correctement
            expected_content = "Vous venez de recevoir un mail contenant des données de mesure de\nl’opération ACC00000066 sur la période du 01/03/2024 au 31/03/2024."
            self.assertIn(expected_content, body)

    def test_decode_email_subject(self):
        with open(self.eml_file_path, 'rb') as eml_file:
            # Utiliser BytesParser pour parser le fichier .eml
            eml_message = BytesParser().parse(eml_file)
            # Récupérer le sujet encodé de l'e-mail
            encoded_subject = eml_message['Subject']
            # Décodez le sujet de l'e-mail
            decoded_subject = decode_email_subject(encoded_subject)
            # Sujet attendu de l'e-mail
            expected_subject = "[Mot de passe] [Personne Morale] Autoconsommation Collective – Convention N°ACC00000066 – Période du « 01/03/2024 » au « 31/03/2024 »"
            # Vérifier si le sujet décodé correspond au sujet attendu
            self.assertTrue(expected_subject in decoded_subject)
            
    @patch('imaplib.IMAP4')
    def test_fetch_emails_since_last_check(self, mock_imaplib):
        # Simuler des e-mails bruts complets
        raw_email1 = b'From: sender@example.com\r\nSubject: Test Email 1\r\n\r\nThis is the email body.'
        raw_email2 = b'From: sender@example.com\r\nSubject: Test Email 2\r\n\r\nThis is another email body.'

        # Créer un objet IMAP simulé
        mock_mail = MagicMock()
        mock_imaplib.return_value = mock_mail

        # Simuler la recherche d'e-mails non lus
        mock_mail.search.return_value = ('OK', [b'1 2'])

        # Simuler la récupération des e-mails
        mock_mail.fetch.side_effect = [
            ('OK', [(None, raw_email1)]),
            ('OK', [(None, raw_email2)])
        ]

        # Appeler la fonction fetch_emails_since_last_check
        emails = fetch_emails_since_last_check(mock_mail)

        # Vérifier si la fonction retourne les e-mails corrects
        self.assertEqual(len(emails), 2)
        self.assertEqual(emails[0]['Subject'], 'Test Email 1')
        self.assertEqual(emails[1]['Subject'], 'Test Email 2')

    def test_is_email_valid(self):
        valid_email = "antoine.leloir@coherence-energies.fr"
        invalid_email = "invalid_email"

        self.assertTrue(is_email_valid(valid_email, self.num_boucle, self.periode))
        self.assertFalse(is_email_valid(invalid_email, self.num_boucle, self.periode))

    def test_send_email(self):
        # Créer un fichier zip fictif pour les tests
        zip_file_path = '/home/ubuntu/CEpublicationEXPL/tests/fixtures/test_zipfile.zip'
        with open(zip_file_path, 'w') as file:
            file.write("Test file content")
        
        try:
            send_email("ssl0.ovh.net", "antoine.leloir@coherence-energies.fr", "Leloir2002!", "antoine.leloir@coherence-energies.fr", "antoine.leloir@coherence-energies.fr",
                       "Test Subject", self.num_boucle, self.periode, zip_file_path)
        except Exception as e:
            self.fail(f"send_email raised an unexpected exception: {e}")

        os.remove(zip_file_path)

if __name__ == '__main__':
    unittest.main()

# A la racine du serveur, python3 -m unittest CEpublicationEXPL.tests.unit.test_utils.test_email_utils