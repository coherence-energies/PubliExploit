# test_df_utils.py
import unittest
import os
import pandas as pd
import numpy as np
from CEpublicationEXPL.src.utils.df_utils import create_database_structure, rename_attribut_values, rename_columns, process_cdc_file, process_synthese_file, harmonize_attribut, process_files_in_directory, calculer_sommeSynt_page3, calculer_sommeSynt_page2, verif_autoprod, verif_surplus


class TestDfUtils(unittest.TestCase):

    def setUp(self):
        self.num_boucle = "test_numboucle"
        self.periode = "test_date1_date2"

    def test_create_database_structure(self):
        # Appel de la fonction
        df = create_database_structure(self.num_boucle, self.periode)

        # Vérification de la structure du DataFrame
        expected_columns = [
            'Id_boucle', 'PRM_prod', 'PRM_conso', 'Attribut', 
            'Date_debut', 'Date_fin', 'Valeur', 'Granularite', 
            'Respo', 'Classe', 'Etat'
        ]
        self.assertEqual(list(df.columns), expected_columns)
        
    def test_process_files_in_directory(self):
        test_directory = '/home/ubuntu/CEpublicationEXPL/tests/fixtures/test_directory_df'
        # Appel de la fonction avec le répertoire de test
        data_frames = process_files_in_directory(test_directory, 'ACC00000066', '01032024', '31032024', self.periode)
        
        df = data_frames[0]
        # Vérification si la liste de DataFrames n'est pas vide
        self.assertTrue(data_frames)
        # Vérification du contenu du DataFrame (simplement la première ligne)
        self.assertEqual(df.iloc[0]['PRM_prod'], '01306222803695')
        self.assertTrue(pd.isna(df.iloc[0]['PRM_conso']))
        self.assertEqual(df.iloc[0]['Attribut'], 'Production')
        self.assertEqual(df.iloc[0]['Valeur'], 1516.11)
        self.assertEqual(df.iloc[0]['Respo'], 'AXPO SOLUTIONS OA')
        self.assertEqual(df.iloc[0]['Id_boucle'], 'ACC00000066')
        self.assertEqual(df.iloc[0]['Date_debut'], '01032024')
        self.assertEqual(df.iloc[0]['Date_fin'], '31032024')
        self.assertEqual(df.iloc[0]['Granularite'], 1)
        
        df = data_frames[1]
        # Vérification si la liste de DataFrames n'est pas vide
        self.assertTrue(data_frames)
        # Vérification du contenu du DataFrame (simplement la première ligne)
        self.assertEqual(df.iloc[0]['PRM_conso'], '01305499214693')
        self.assertEqual(df.iloc[0]['Classe'], 'HC')
        self.assertEqual(df.iloc[0]['Attribut'], 'Consommation')
        self.assertEqual(df.iloc[0]['Valeur'], 685.42)
        self.assertEqual(df.iloc[0]['Id_boucle'], 'ACC00000066')
        self.assertEqual(df.iloc[0]['Date_debut'], '01032024')
        self.assertEqual(df.iloc[0]['Date_fin'], '31032024')
        self.assertEqual(df.iloc[0]['Granularite'], 1)
        
        df = data_frames[2]
        # Vérification si la liste de DataFrames n'est pas vide
        self.assertTrue(data_frames)
        # Vérification du contenu du DataFrame (simplement la première ligne)        
        self.assertEqual(df.iloc[0]['Id_boucle'], 'ACC00000066')
        self.assertEqual(df.iloc[0]['PRM_conso'], '01305499214693')
        self.assertEqual(df.iloc[0]['Attribut'], 'Autoconso')
        self.assertEqual(df.iloc[0]['Date_debut'], pd.Timestamp('2024-03-01 00:00:00'))
        self.assertEqual(df.iloc[0]['Date_fin'], pd.Timestamp('2024-03-01 00:30:00'))
        self.assertEqual(df.iloc[0]['Valeur'], 0.0)
        self.assertEqual(df.iloc[0]['Granularite'], 2)


    def test_process_cdc_file(self):
        # Appeler la fonction à tester
        test_directory = '/home/ubuntu/CEpublicationEXPL/tests/fixtures/test_directory_df/01305499214693_01032024_31032024_Autoconso_CDC.csv'
        df = process_cdc_file(test_directory, 'ACC00000066', '01305499214693', 'Autoconso', self.periode)

        # Vérification si la liste de DataFrames n'est pas vide
        self.assertFalse(df.empty)
        
        # Vérification du contenu du DataFrame (simplement la première ligne)
        self.assertEqual(df.iloc[0]['Id_boucle'], 'ACC00000066')
        self.assertEqual(df.iloc[0]['PRM_conso'], '01305499214693')
        self.assertEqual(df.iloc[0]['Attribut'], 'Autoconso')
        self.assertEqual(df.iloc[0]['Date_debut'], pd.Timestamp('2024-03-01 00:00:00'))
        self.assertEqual(df.iloc[0]['Date_fin'], pd.Timestamp('2024-03-01 00:30:00'))
        self.assertEqual(df.iloc[0]['Valeur'], 0.0)
        self.assertEqual(df.iloc[0]['Granularite'], 2)
        
        self.assertEqual(df.iloc[1]['Id_boucle'], 'ACC00000066')
        self.assertEqual(df.iloc[1]['PRM_conso'], '01305499214693')
        self.assertEqual(df.iloc[1]['Attribut'], 'Autoconso')
        self.assertEqual(df.iloc[1]['Date_debut'], pd.Timestamp('2024-03-01 00:30:00'))
        self.assertEqual(df.iloc[1]['Date_fin'], pd.Timestamp('2024-03-01 01:00:00'))
        self.assertEqual(df.iloc[1]['Valeur'], 0.0)
        self.assertEqual(df.iloc[1]['Granularite'], 2)
        
        
    def test_process_synthese_file(self):
        test_directory = '/home/ubuntu/CEpublicationEXPL/tests/fixtures/test_directory_df/ACC00000066_01032024_31032024_synthese.xlsx'
        date_debut = '01032024'
        date_fin = '31032024'
        # Initialiser une liste de DataFrames vide
        data_frames = []
        process_synthese_file(test_directory, data_frames, 'ACC00000066', date_debut, date_fin, self.periode)

        # Vérifier si la liste de DataFrames n'est pas vide
        self.assertTrue(data_frames)

        # Vérifier les DataFrames ajoutés à la liste
        self.assertEqual(len(data_frames), 2)  # Nous nous attendons à 2 DataFrames

        # Vérifier le contenu du premier DataFrame ajouté
        df_sheet2 = data_frames[0]
        self.assertEqual(df_sheet2.iloc[0]['PRM_prod'], '01306222803695')
        self.assertTrue(pd.isna(df_sheet2.iloc[0]['PRM_conso']))
        self.assertEqual(df_sheet2.iloc[0]['Attribut'], 'Production')
        self.assertEqual(df_sheet2.iloc[0]['Valeur'], 1516.11)
        self.assertEqual(df_sheet2.iloc[0]['Respo'], 'AXPO SOLUTIONS OA')
        self.assertEqual(df_sheet2.iloc[0]['Id_boucle'], 'ACC00000066')
        self.assertEqual(df_sheet2.iloc[0]['Date_debut'], '01032024')
        self.assertEqual(df_sheet2.iloc[0]['Date_fin'], '31032024')
        self.assertEqual(df_sheet2.iloc[0]['Granularite'], 1)
        

        # Vérifier le contenu du deuxième DataFrame ajouté
        df_sheet3 = data_frames[1]
        self.assertEqual(df_sheet3.iloc[0]['PRM_conso'], '01305499214693')
        self.assertEqual(df_sheet3.iloc[0]['Classe'], 'HC')
        self.assertEqual(df_sheet3.iloc[0]['Attribut'], 'Consommation')
        self.assertEqual(df_sheet3.iloc[0]['Valeur'], 685.42)
        self.assertEqual(df_sheet3.iloc[0]['Id_boucle'], 'ACC00000066')
        self.assertEqual(df_sheet3.iloc[0]['Date_debut'], '01032024')
        self.assertEqual(df_sheet3.iloc[0]['Date_fin'], '31032024')
        self.assertEqual(df_sheet3.iloc[0]['Granularite'], 1)

    def test_rename_columns(self):
        # Définir le mapping de test
        data = {
            'Id_boucle': ['ACC00000066'],
            'PRM prod': ['01305499214693'],
            'PRM_conso': ['01305499214693'],
            'Attribut': ['Consommation'],
            'debut': [pd.Timestamp('2024-03-01 00:30:00')],
            'Date_fin': [pd.Timestamp('2024-03-01 01:00:00')],
            'Valeur': [19],
            'Granu': [2],
            'Responsable': ['AXPO SOLUTIONS OA'],
            'Classe': ['HC'],
            'Etat': ['Vérifié']
        }
        self.df = pd.DataFrame(data)
        # Appeler la fonction à tester
        renamed_df = rename_columns(self.df, self.num_boucle, self.periode)

        # Vérifier si les colonnes sont renommées correctement
        expected_columns = ['Id_boucle', 'PRM_prod', 'PRM_conso', 'Attribut', 'Date_debut', 'Date_fin', 'Valeur', 'Granularite', 'Respo', 'Classe', 'Etat']
        self.assertEqual(list(renamed_df.columns), expected_columns)
        

    def test_harmonize_attribut(self):
        self.attributs_uniques = ['Autoconsommation', 'Surplus', 'Surplus Réparti', 'Complément', 'Production']
        self.expected_result = ['Autoproduction', 'Surplus', 'Surplus', 'Complément', 'Production']
        # Test d'harmonisation pour chaque attribut unique
        for attribut, expected in zip(self.attributs_uniques, self.expected_result):
            harmonized = harmonize_attribut(attribut)
            # Vérification que l'attribut harmonisé correspond à l'attendu
            self.assertEqual(harmonized, expected)
            
    def test_rename_attribut_values(self):
        # Définir les attributs
        attributs = ['Autoconsommation', 'Surplus', 'Consommation', 'Autoconso', 'Autoconsommation individuelle', 'Surplus Réparti', 'Complément', 'Production']
        
        # Créer un DataFrame à partir de la liste d'attributs
        df = pd.DataFrame({'Attribut': attributs})
        
        # Appeler la fonction à tester
        renamed_df = rename_attribut_values(df)
    
        # Vérifier si les valeurs de la colonne 'Attribut' sont renommées correctement
        expected_values = ['Autoconsommation', 'Surplus', 'Consommation', 'Autoconsommation', 'Autoconsommation', 'Surplus', 'Complément', 'Production']
        self.assertListEqual(list(renamed_df['Attribut']), expected_values)
        
    def test_calculer_sommeSynt_page2(self):
        test_directory = '/home/ubuntu/CEpublicationEXPL/tests/fixtures/test_directory_df'
        # Appel de la fonction avec le répertoire de test
        data_frames = process_files_in_directory(test_directory, 'ACC00000066', '01032024', '31032024', self.periode)
        
        df = pd.DataFrame(columns=['Id_boucle', 'PRM_prod', 'PRM_conso', 'Attribut', 'Date_debut', 'Date_fin', 'Valeur', 'Granularite', 'Respo', 'Classe', 'Etat'])
        
        data_frames = pd.concat(data_frames, ignore_index=True)
        
        data_frames = data_frames.reindex(columns=df.columns, fill_value=np.nan)
        
        df = pd.concat([df, data_frames], ignore_index=True)
        
        sommeCDC = 287.4585  # Somme CDC à vérifier
        granu = 1
        prm = '01305499214693'
        harmonized_att = 'Autoproduction'
        
        calculer_sommeSynt_page2(df, prm, harmonized_att, sommeCDC, self.num_boucle, self.periode)
        
        df = df[(df['Granularite'] == 1)]
        df = df[(~df['Respo'].isna())]
        df = df[(df['PRM_conso'] == '01305499214693')]
        df = df[df['Attribut'] == 'Autoproduction']
        
        # Vérifier si l'état est mis à 'Vérifié' pour les valeurs correctes
        self.assertEqual(df.iloc[0]['Etat'], 'Vérifié')  # La somme est correcte pour cette ligne
        self.assertEqual(df.iloc[1]['Etat'], 'Vérifié')  # La somme est correcte pour cette ligne
        self.assertEqual(df.iloc[2]['Etat'], 'Vérifié')  # La somme est correcte pour cette ligne
        self.assertEqual(df.iloc[3]['Etat'], 'Vérifié')  # La somme est correcte pour cette ligne
        self.assertEqual(df.iloc[4]['Etat'], 'Vérifié')  # La somme est correcte pour cette ligne
        
    
    def test_calculer_sommeSynt_page3(self):
        test_directory = '/home/ubuntu/CEpublicationEXPL/tests/fixtures/test_directory_df'
        # Appel de la fonction avec le répertoire de test
        data_frames = process_files_in_directory(test_directory, 'ACC00000066', '01032024', '31032024', self.periode)
        
        df = pd.DataFrame(columns=['Id_boucle', 'PRM_prod', 'PRM_conso', 'Attribut', 'Date_debut', 'Date_fin', 'Valeur', 'Granularite', 'Respo', 'Classe', 'Etat'])
        
        data_frames = pd.concat(data_frames, ignore_index=True)
        
        data_frames = data_frames.reindex(columns=df.columns, fill_value=np.nan)
        
        df = pd.concat([df, data_frames], ignore_index=True)
        
        df = rename_attribut_values(df)
        
        sommeCDC = 287.4585  # Somme CDC à vérifier
        granu = 1
        prm = '01305499214693'
        harmonized_att = 'Autoproduction'
        att = 'Autoconsommation'
        
        calculer_sommeSynt_page3(df, prm, att, harmonized_att, sommeCDC, self.num_boucle, self.periode)
        
        df = df[(df['Granularite'] == 1)]
        df = df[(df['Respo'].isna())]
        df = df[(df['PRM_conso'] == '01305499214693')]
        df = df[df['Attribut'] == 'Autoconsommation']
        
        # Vérifier si l'état est mis à 'Vérifié' pour les valeurs correctes
        self.assertEqual(df.iloc[0]['Etat'], 'Vérifié')  # La somme est correcte pour cette ligne
        self.assertEqual(df.iloc[1]['Etat'], 'Vérifié')  # La somme est correcte pour cette ligne
        
    def test_verif_autoprod(self):
        test_file = '/home/ubuntu/CEpublicationEXPL/tests/fixtures/test_verif.xlsx'
        # Appel de la fonction avec le répertoire de test
        
        with pd.ExcelFile(test_file) as xls:
            # Lecture de la deuxième feuille
            df = pd.read_excel(test_file, sheet_name=xls.sheet_names[0])
        
        verif_autoprod(df, self.num_boucle, self.periode)
        
        df_autoprod = df[(df['Granularite'] == 1)]
        df_autoprod = df_autoprod[(~df_autoprod['Respo'].isna())]
        df_autoprod = df_autoprod[df_autoprod['Attribut'] == 'Autoproduction']
        df_autoprod = df_autoprod[(df_autoprod['PRM_conso'].isna())]
        
        # Vérifier si l'état est mis à 'Vérifié (sans CDC)' pour chaque ligne
        for index, row in df_autoprod.iterrows():
            self.assertEqual(row['Etat'], 'Vérifié (sans CDC)')
            
    def test_verif_surplus(self):
        test_file = '/home/ubuntu/CEpublicationEXPL/tests/fixtures/test_verif.xlsx'
        # Appel de la fonction avec le répertoire de test
        
        with pd.ExcelFile(test_file) as xls:
            # Lecture de la deuxième feuille
            df = pd.read_excel(test_file, sheet_name=xls.sheet_names[0])
        
        verif_autoprod(df, self.num_boucle, self.periode)
        verif_surplus(df, self.num_boucle, self.periode)
        
        df_surplus = df[df['Granularite'] == 1]
        df_surplus = df_surplus[~df_surplus['Respo'].isna()]
        df_surplus = df_surplus[df_surplus['PRM_conso'].isna()]
        df_surplus = df_surplus[df_surplus['Attribut'] == 'Surplus']
        
        # Vérifier si l'état est mis à 'Vérifié (sans CDC)' pour chaque ligne
        for index, row in df_surplus.iterrows():
            self.assertEqual(row['Etat'], 'Vérifié (sans CDC)')


if __name__ == '__main__':
    unittest.main()

    
# A la racine du serveur, python3 -m unittest CEpublicationEXPL.tests.unit.test_utils.test_df_utils
