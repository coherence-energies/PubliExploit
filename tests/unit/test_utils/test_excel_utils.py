# test_excel_utils.py
import unittest
import os
import openpyxl
import datetime
from CEpublicationEXPL.src.utils.excel_utils import write_to_excel, find_matching_entries, remove_ok_status_rows

class TestExcelUtils(unittest.TestCase):

    def setUp(self):
        # Créer un fichier Excel temporaire pour les tests
        self.test_excel_file = '/home/ubuntu/CEpublicationEXPL/tests/fixtures/test_excel_file.xlsx'
        self.wb = openpyxl.Workbook()
        self.ws = self.wb.active
        self.ws.append(["num_boucle", "date_debut", "date_fin", "password", "folder_path", "status", "date_ajout"])
        self.wb.save(self.test_excel_file)
        self.wb.close()  # S'assurer que le workbook est fermé
        self.num_boucle = 'test_numboucle'
        self.periode = 'test_date1_date2'

    def tearDown(self):
        # Supprimer le fichier Excel temporaire après les tests
        if os.path.exists(self.test_excel_file):
            os.remove(self.test_excel_file)

    def test_write_to_excel(self):
        write_to_excel(self.test_excel_file, self.num_boucle, "test_date1", "date2", "password123", "path/to/folder")
        
        # Charger le fichier Excel et vérifier le contenu
        wb = openpyxl.load_workbook(self.test_excel_file)
        ws = wb.active
        rows = list(ws.iter_rows(values_only=True))
        self.assertEqual(len(rows), 2)  # En-tête + 1 ligne
        self.assertEqual(rows[1][:5], (self.num_boucle, "test_date1", "date2", "password123", "path/to/folder"))
        wb.save(self.test_excel_file)
        wb.close()

    def test_find_matching_entries(self):
        # Ajouter des lignes au fichier Excel pour les tests
        wb = openpyxl.load_workbook(self.test_excel_file)
        ws = wb.active
        ws.append(["ACC00000066", "01/03/2024", "31/03/2024", "password123", "path/to/folder", "NULL", datetime.datetime.now()])
        ws.append(["ACC00000066", "01/03/2024", "31/03/2024", "NULL", "path/to/folder", "NULL", datetime.datetime.now()])
        wb.save(self.test_excel_file)
        wb.close()

        # Rechercher des entrées correspondantes
        mdp, repertoire = find_matching_entries(self.test_excel_file, self.num_boucle, self.periode)
        self.assertEqual(mdp, "password123")
        self.assertEqual(repertoire, "path/to/folder")

    def test_remove_ok_status_rows(self):
        # Ajouter des lignes au fichier Excel pour les tests
        wb = openpyxl.load_workbook(self.test_excel_file)
        ws = wb.active
        ws.append(["ACC00000066", "01/03/2024", "31/03/2024", "password123", "path/to/folder", "OK", datetime.datetime.now()])
        ws.append(["ACC00000066", "01/03/2024", "31/03/2024", "NULL", "path/to/folder", "OK", datetime.datetime.now()])
        wb.save(self.test_excel_file)
        wb.close()

        # Supprimer les lignes avec statut 'OK'
        remove_ok_status_rows(self.test_excel_file, self.num_boucle, self.periode)

        # Vérifier que la ligne avec statut 'OK' a été supprimée
        wb = openpyxl.load_workbook(self.test_excel_file)
        ws = wb.active
        rows = list(ws.iter_rows(values_only=True))
        self.assertEqual(len(rows), 1)  # Seulement l'en-tête reste
        self.assertEqual(rows[0], ("num_boucle", "date_debut", "date_fin", "password", "folder_path", "status", "date_ajout"))
        wb.save(self.test_excel_file)
        wb.close()

if __name__ == '__main__':
    unittest.main()
    
# A la racine du serveur, python3 -m unittest CEpublicationEXPL.tests.unit.test_utils.test_excel_utils