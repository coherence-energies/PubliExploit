# test_imap_utils.py
import unittest
from unittest.mock import patch
import configparser
import sys
import io
from CEpublicationEXPL.src.utils.imap_utils import connect_to_imap, disconnect_from_imap

class TestConnectToIMAP(unittest.TestCase):
    def setUp(self):
        # Créer des instances de ConfigParser pour les configurations IMAP et des sites
        self.config_imap = configparser.ConfigParser()
        self.config_imap.read('/home/ubuntu/CEpublicationEXPL/tests/fixtures/test_config.ini')

        self.config_sites = configparser.ConfigParser()
        self.config_sites.read('/home/ubuntu/CEpublicationEXPL/tests/fixtures/test_config_sites.ini')

    @patch('imaplib.IMAP4_SSL')
    def test_connect_to_imap_success(self, mock_imap_ssl):
        # Créer un mock de l'instance IMAP4_SSL
        mock_imap = mock_imap_ssl.return_value
        mock_imap.login.return_value = ('OK', [])  # Simuler une connexion réussie

        # Appeler la fonction connect_to_imap
        mail = connect_to_imap(self.config_imap, self.config_sites['TEST'])

        # Vérifier que IMAP4_SSL a été initialisé avec le bon serveur
        imap_server = self.config_imap.get('IMAP', 'server')
        mock_imap_ssl.assert_called_with(imap_server)

        # Vérifier que la méthode login a été appelée avec les bons identifiants
        username = self.config_sites.get('TEST', 'username')
        password = self.config_sites.get('TEST', 'password')
        mock_imap.login.assert_called_with(username, password)

        # Vérifier que la fonction renvoie l'instance IMAP4_SSL
        self.assertEqual(mail, mock_imap)
        
    @patch('imaplib.IMAP4_SSL')
    def test_connect_to_imap_failure(self, mock_imap_ssl):
        # Simuler une erreur lors de la connexion IMAP
        mock_imap_ssl.side_effect = Exception('Erreur de connexion IMAP')

        # Capturer la sortie stdout pour vérifier le message d'erreur
        captured_output = io.StringIO()
        sys.stdout = captured_output

        # Appeler la fonction connect_to_imap
        with self.assertRaises(SystemExit):
            connect_to_imap(self.config_imap, self.config_sites['TEST'])

        # Vérifier que le message d'erreur est affiché correctement
        expected_error_message = "Erreur lors de la connexion au serveur IMAP : Erreur de connexion IMAP\n"
        self.assertEqual(captured_output.getvalue(), expected_error_message)

        # Restaurer stdout
        sys.stdout = sys.__stdout__
        
    @patch('imaplib.IMAP4_SSL')
    def test_disconnect_from_imap(self, mock_imap_ssl):
        # Créer un mock de l'instance IMAP4_SSL
        mock_imap = mock_imap_ssl.return_value

        # Appeler la fonction disconnect_from_imap
        disconnect_from_imap(mock_imap)

        # Vérifier que la méthode logout a été appelée sur l'instance IMAP4_SSL
        mock_imap.logout.assert_called_once()
        
    @patch('imaplib.IMAP4_SSL')
    def test_disconnect_from_imap_with_error(self, mock_imap_ssl):
        # Créer un mock de l'instance IMAP4_SSL
        mock_imap = mock_imap_ssl.return_value

        # Simuler une erreur lors de la déconnexion
        mock_imap.logout.side_effect = Exception('Erreur lors de la déconnexion')

        # Capturer la sortie stdout pour vérifier le message d'erreur
        captured_output = io.StringIO()
        sys.stdout = captured_output

        # Appeler la fonction disconnect_from_imap
        disconnect_from_imap(mock_imap)

        # Vérifier que le message d'erreur est affiché correctement
        expected_error_message = "Erreur lors de la déconnexion du serveur IMAP\n"
        self.assertEqual(captured_output.getvalue(), expected_error_message)

        # Restaurer stdout
        sys.stdout = sys.__stdout__


if __name__ == '__main__':
    unittest.main()
    
# A la racine du serveur, python3 -m unittest CEpublicationEXPL.tests.unit.test_utils.test_imap_utils