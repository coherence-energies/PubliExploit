# test_regex_utils.py
import unittest
import os
from CEpublicationEXPL.src.utils.regex_utils import extract_boucle_num, extract_dates, extract_password, extract_prm, extract_attribut

class TestRegexUtils(unittest.TestCase):

    def setUp(self):
        # Réouverture du logger pour chaque test
        self.numboucle = 'test_numboucle'
        self.periode = 'test_date1_date2'

    def test_extract_boucle_num(self):
        subject = "Fwd: [Personne Morale] Autoconsommation Collective – Convention N°ACC00000066 – Période du « 01/03/2024 » au « 31/03/2024 »"
        result = extract_boucle_num(subject)
        self.assertEqual(result, 'ACC00000066')
        if result == 'ACC00000066':
            print(f"test_extract_boucle_num réussi: {result}")
        else:
            print("test_extract_boucle_num échoué")

        result = extract_boucle_num("No match here")
        self.assertIsNone(result)
        if result is None:
            print("test_extract_boucle_num avec 'No match here' réussi: None")
        else:
            print("test_extract_boucle_num avec 'No match here' échoué")

    def test_extract_dates(self):
        subject = "Fwd: [Personne Morale] Autoconsommation Collective – Convention N°ACC00000066 – Période du « 01/03/2024 » au « 31/03/2024 »"
        result = extract_dates(subject, self.numboucle)
        self.assertEqual(result, ('01/03/2024', '31/03/2024'))
        if result == ('01/03/2024', '31/03/2024'):
            print(f"test_extract_dates réussi: {result}")
        else:
            print("test_extract_dates échoué")

        result = extract_dates("No dates here", self.numboucle)
        self.assertEqual(result, (None, None))
        if result == (None, None):
            print("test_extract_dates avec 'No dates here' réussi: (None, None)")
        else:
            print("test_extract_dates avec 'No dates here' échoué")

    def test_extract_password(self):
        password_mail_path = '/home/ubuntu/CEpublicationEXPL/tests/fixtures/sample_emails/password_mail.txt'
        
        with open(password_mail_path, 'r', encoding='utf-8') as f:
            content_with_password = f.read()
            
        result = extract_password(content_with_password, self.numboucle, self.periode)
        self.assertEqual(result, '7rAO3FNy!6M5')
        if result == '7rAO3FNy!6M5':
            print(f"test_extract_password réussi: {result}")
        else:
            print("test_extract_password échoué")

        result = extract_password("No password here", self.numboucle, self.periode)
        self.assertIsNone(result)
        if result is None:
            print("test_extract_password avec 'No password here' réussi: None")
        else:
            print("test_extract_password avec 'No password here' échoué")

    def test_extract_prm(self):
        file_name = "01305499214693_01032024_31032024_Autoconso_CDC.csv"
        result = extract_prm(file_name, self.numboucle, self.periode)
        self.assertEqual(result, '01305499214693')
        if result == '01305499214693':
            print(f"test_extract_prm réussi: {result}")
        else:
            print("test_extract_prm échoué")

        result = extract_prm("invalid_filename.txt", self.numboucle, self.periode)
        self.assertIsNone(result)
        if result is None:
            print("test_extract_prm avec 'invalid_filename.txt' réussi: None")
        else:
            print("test_extract_prm avec 'invalid_filename.txt' échoué")

    def test_extract_attribut(self):
        file_name = "01305499214693_01032024_31032024_Autoconso_CDC.csv"
        result = extract_attribut(file_name, self.numboucle, self.periode)
        self.assertEqual(result, 'Autoconso')
        if result == 'Autoconso':
            print(f"test_extract_attribut réussi: {result}")
        else:
            print("test_extract_attribut échoué")

        result = extract_attribut("invalid_filename.txt", self.numboucle, self.periode)
        self.assertIsNone(result)
        if result is None:
            print("test_extract_attribut avec 'invalid_filename.txt' réussi: None")
        else:
            print("test_extract_attribut avec 'invalid_filename.txt' échoué")

if __name__ == '__main__':
    unittest.main()
    
# A la racine du serveur, python3 -m unittest CEpublicationEXPL.tests.unit.test_utils.test_regex_utils