# test_file_utils.py
import unittest
import os
import shutil
from email.parser import BytesParser
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from CEpublicationEXPL.src.utils.file_utils import (create_directory, move_zip_to_directory,
                                  get_first_directory_name, list_zip_files,
                                  compresser_dossier, supprimer_fichier,
                                  get_first_zip_file, delete_directory)

class FakeEmail:
    def walk(self):
        # Simuler une pièce jointe avec un nom de fichier
        part = MIMEMultipart()
        part.add_header('Content-Disposition', 'attachment', filename='test_zip_file.zip')
        zip_data = b'Test ZIP file'  # Contenu du fichier ZIP simulé
        part.attach(MIMEApplication(zip_data, 'zip'))
        yield part


class TestFileUtils(unittest.TestCase):

    def setUp(self):
        # Créer un répertoire de test pour les fichiers temporaires
        self.temp_dir = 'temp_test_dir'
        create_directory(self.temp_dir)
        self.eml_file_path = "/home/ubuntu/CEpublicationEXPL/tests/fixtures/sample_emails/sample_email_PJ.eml"
        self.numboucle = 'test_numboucle'
        self.periode = 'test_date1_date2'

    def tearDown(self):
        # Supprimer le répertoire de test avec tous ses contenus
        delete_directory(self.temp_dir, self.numboucle, self.periode)

    def test_create_directory(self):
        # Créer un répertoire et vérifier s'il existe
        folder_path = os.path.join('/home/ubuntu/CEpublicationEXPL/tests/fixtures', 'test_folder')
        create_directory(folder_path)
        self.assertTrue(os.path.exists(folder_path))
        shutil.rmtree(folder_path)
        
    def test_move_zip_to_directory(self):
        # Créer un répertoire temporaire pour le test
        dest_folder = os.path.join('/home/ubuntu/CEpublicationEXPL/tests/fixtures', 'test_folder_destination')
        if not os.path.exists(dest_folder):
            os.makedirs(dest_folder)

        with open(self.eml_file_path, 'rb') as eml_file:
            # Utiliser BytesParser pour parser le fichier .eml
            eml_message = BytesParser().parse(eml_file)
        try:
            # Appeler la fonction move_zip_to_directory avec un objet FakeEmail
            move_zip_to_directory(eml_message, dest_folder, 'export.zip', self.numboucle, self.periode)

            # Vérifier si le fichier ZIP a été déplacé avec succès dans le répertoire de destination
            self.assertTrue(os.path.exists(os.path.join(dest_folder, 'export.zip')))
        finally:
            # Nettoyer après le test en supprimant le répertoire temporaire
            shutil.rmtree(dest_folder)

    def test_get_first_directory_name(self):
        # Créer quelques répertoires
        os.makedirs(os.path.join('/home/ubuntu/CEpublicationEXPL/tests/fixtures', 'dir1'))
        os.makedirs(os.path.join('/home/ubuntu/CEpublicationEXPL/tests/fixtures', 'dir2'))

        # Obtenir le nom du premier répertoire
        first_dir = get_first_directory_name('/home/ubuntu/CEpublicationEXPL/tests/fixtures')
        self.assertEqual(first_dir, 'dir1')
        shutil.rmtree('/home/ubuntu/CEpublicationEXPL/tests/fixtures/dir1')
        shutil.rmtree('/home/ubuntu/CEpublicationEXPL/tests/fixtures/dir2')

    def test_list_zip_files(self):
        # Créer quelques fichiers ZIP
        open(os.path.join('/home/ubuntu/CEpublicationEXPL/tests/fixtures', 'file1.zip'), 'a').close()
        open(os.path.join('/home/ubuntu/CEpublicationEXPL/tests/fixtures', 'file2.zip'), 'a').close()

        # Obtenir la liste des fichiers ZIP
        zip_files = list_zip_files('/home/ubuntu/CEpublicationEXPL/tests/fixtures')
        self.assertEqual(len(zip_files), 2)
        self.assertIn('file1.zip', zip_files)
        self.assertIn('file2.zip', zip_files)
        os.remove('/home/ubuntu/CEpublicationEXPL/tests/fixtures/file1.zip')
        os.remove('/home/ubuntu/CEpublicationEXPL/tests/fixtures/file2.zip')

    def test_compresser_dossier(self):
        # Créer un dossier 
        archive_path = os.path.join('/home/ubuntu/CEpublicationEXPL/tests/fixtures', 'test_archive')
        os.makedirs(archive_path, exist_ok=True)
        
        self.assertTrue(compresser_dossier(archive_path, archive_path, self.numboucle, self.periode))
        self.assertTrue(os.path.exists(archive_path + '.zip'))
        os.remove(archive_path + '.zip')
        shutil.rmtree(archive_path)

    def test_supprimer_fichier(self):
        # Créer un fichier temporaire
        temp_file = os.path.join('/home/ubuntu/CEpublicationEXPL/tests/fixtures', 'temp_file.txt')
        with open(temp_file, 'w') as f:
            f.write("Test")

        # Supprimer le fichier
        supprimer_fichier(temp_file, self.numboucle, self.periode)
        self.assertFalse(os.path.exists(temp_file))

    def test_get_first_zip_file(self):
        # Créer quelques fichiers dans le dossier temporaire
        open(os.path.join('/home/ubuntu/CEpublicationEXPL/tests/fixtures', 'file1.zip'), 'a').close()
        open(os.path.join('/home/ubuntu/CEpublicationEXPL/tests/fixtures', 'file2.txt'), 'a').close()

        # Vérifier si le premier fichier ZIP est trouvé
        first_zip = get_first_zip_file('/home/ubuntu/CEpublicationEXPL/tests/fixtures')
        self.assertEqual(first_zip, 'file1.zip')
        os.remove('/home/ubuntu/CEpublicationEXPL/tests/fixtures/file1.zip')
        os.remove('/home/ubuntu/CEpublicationEXPL/tests/fixtures/file2.txt')

    def test_delete_directory(self):
        # Créer un sous-répertoire dans le dossier temporaire
        sub_dir = os.path.join('/home/ubuntu/CEpublicationEXPL/tests/fixtures', 'sub_dir')
        os.makedirs(sub_dir)

        # Supprimer le sous-répertoire
        delete_directory(sub_dir, self.numboucle, self.periode)
        self.assertFalse(os.path.exists(sub_dir))

if __name__ == '__main__':
    unittest.main()
    
# A la racine du serveur, python3 -m unittest CEpublicationEXPL.tests.unit.test_utils.test_file_utils