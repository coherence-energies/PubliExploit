import tkinter as tk
import tkinter.ttk as ttk
from tkinter import messagebox
import configparser
import re
import paramiko
from paramiko import SSHClient
from scp import SCPClient

def read_config(config_file):
    """Lire les paramètres de configuration depuis le fichier config.ini."""
    config = configparser.ConfigParser()
    config.read(config_file)
    return config

def download_config_file(sftp, remote_path, local_path):
    """Télécharge un fichier de configuration depuis le serveur SFTP."""
    try:
        sftp.get(remote_path, local_path)
        messagebox.showinfo("Information", "Fichier de configuration téléchargé avec succès.")
    except Exception as e:
        messagebox.showerror("Erreur", f"Erreur de téléchargement du fichier de configuration: {e}")

def update_remote_config(sftp, config_file, remote_path):
    try:
        sftp.put(config_file, remote_path)
        print("Fichier de configuration mis à jour sur le serveur.")
    except Exception as e:
        print(f"Erreur lors de la mise à jour du fichier sur le serveur : {e}")

def upload_config_file(sftp, local_path, remote_path):
    """Upload un fichier de configuration sur le serveur SFTP."""
    try:
        sftp.put(local_path, remote_path)
        messagebox.showinfo("Information", "Fichier de configuration uploadé avec succès.")
    except Exception as e:
        messagebox.showerror("Erreur", f"Erreur d'upload du fichier de configuration: {e}")


def connect_sftp(hostname, port, username, password):
    """Etablit une connexion SFTP et retourne un objet SFTP."""
    try:
        transport = paramiko.Transport((hostname, port))
        transport.connect(username=username, password=password)
        sftp = paramiko.SFTPClient.from_transport(transport)
        messagebox.showinfo("Information", "Connexion au serveur SFTP réussie.")
        return sftp
    except Exception as e:
        messagebox.showerror("Erreur", f"Erreur de connexion au serveur SFTP: {e}")

def add_site(config_file, site_name, username, password, sftp, remote_path):
    config = configparser.ConfigParser()
    config.read(config_file)

    config[site_name] = {
        'username': username,
        'password': password,
    }
    with open(config_file, 'w') as configfile:
        config.write(configfile)
    messagebox.showinfo("Information", f"Site ajouté : {site_name}")
    
    # Mise à jour du fichier sur le serveur
    update_remote_config(sftp, config_file, remote_path)

def remove_site(config_file, site_name, sftp, remote_path):
    config = configparser.ConfigParser()
    config.read(config_file)
    if config.remove_section(site_name):
        with open(config_file, 'w') as configfile:
            config.write(configfile)
        messagebox.showinfo("Information", f"Site supprimé : {site_name}")
        
        # Mise à jour du fichier sur le serveur
        update_remote_config(sftp, config_file, remote_path)
    else:
        messagebox.showerror("Erreur", f"Le site {site_name} n'existe pas.")

def center_window(window, width, height):
    # Obtenez la largeur et la hauteur de l'écran
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()

    # Calculez les coordonnées x et y pour centrer la fenêtre
    x = (screen_width / 2) - (width / 2)
    y = (screen_height / 2) - (height / 2)

    # Définissez la géométrie de la fenêtre
    window.geometry("%dx%d+%d+%d" % (width, height, x, y))

def show_add_site_form(root, config_file, sftp, remote_path):
    """Afficher le formulaire pour ajouter un site."""
    add_window = tk.Toplevel(root)
    add_window.title("Ajouter un site")
    add_window.geometry("500x250")  # Modifier la taille de la fenêtre

    # Définir la fenêtre principale comme parent de la fenêtre d'ajout
    add_window.transient(root)
    add_window.grab_set()
    
    # Centrez la fenêtre
    center_window(add_window, 500, 250)

    form_frame = tk.Frame(add_window, padx=20, pady=20)
    form_frame.pack(expand=True, fill="both")

    tk.Label(form_frame, text="Nom du site:", anchor="w").grid(row=0, column=0, sticky="ew")
    tk.Label(form_frame, text="Nom d'utilisateur:", anchor="w").grid(row=1, column=0, sticky="ew")
    tk.Label(form_frame, text="Mot de passe:", anchor="w").grid(row=2, column=0, sticky="ew")

    site_name_entry = tk.Entry(form_frame)
    username_entry = tk.Entry(form_frame)
    password_entry = tk.Entry(form_frame)

    site_name_entry.grid(row=0, column=1, padx=10, pady=5)
    username_entry.grid(row=1, column=1, padx=10, pady=5)
    password_entry.grid(row=2, column=1, padx=10, pady=5)

    # Ajouter des exemples à côté des entrées
    tk.Label(form_frame, text="(ex: Site)").grid(row=0, column=2, sticky="w", padx=(0, 10))  # Augmentation de la marge à droite
    tk.Label(form_frame, text="(ex: site@coherence-energies.fr)").grid(row=1, column=2, sticky="w", padx=(0, 10))  # Augmentation de la marge à droite
    tk.Label(form_frame, text="(ex: passwordMail)").grid(row=2, column=2, sticky="w", padx=(0, 10))  # Augmentation de la marge à droite

    def submit_add_site():
        site_name = site_name_entry.get()
        username = username_entry.get()
        password = password_entry.get()
        
        # Check if any field is empty
        if not site_name or not username or not password:
            messagebox.showerror("Erreur", "Veuillez remplir tous les champs.")
            return
        
        # Vérifier si l'adresse e-mail est valide
        if not re.match(r"[^@]+@[^@]+\.[^@]+", username):
            messagebox.showerror("Erreur", "L'adresse e-mail n'est pas valide.")
            return

        add_site(config_file, site_name, username, password, sftp, remote_path)
        add_window.destroy()

    submit_button = tk.Button(form_frame, text="Ajouter", command=submit_add_site, bg="green", fg="white")
    submit_button.grid(row=4, columnspan=3, pady=10)

    # Centrer le bouton
    submit_button.place(relx=0.5, rely=0.9, anchor="center")

def show_remove_site_form(root, config_file, sftp, remote_path):
    """Afficher le formulaire pour supprimer un site."""
    remove_window = tk.Toplevel(root)
    remove_window.title("Supprimer un site")
    remove_window.geometry("400x150")

    # Centrez la fenêtre
    center_window(remove_window, 400, 150)

    form_frame = tk.Frame(remove_window, padx=20, pady=20)
    form_frame.pack(expand=True, fill="both")

    # Utiliser un LabelFrame pour grouper le label et la liste déroulante
    labelframe = tk.LabelFrame(form_frame)
    labelframe.pack(padx=10, pady=10, fill="x")

    # Ajouter le label à l'intérieur du LabelFrame
    tk.Label(labelframe, text="Sélectionner un site à supprimer:").pack(side="left", padx=(0, 10))

    # Créer la liste déroulante avec ttk.Combobox
    sites_list = list(read_config(config_file).sections())
    selected_site = tk.StringVar()  # Variable pour stocker la valeur sélectionnée
    site_name_combobox = ttk.Combobox(labelframe, textvariable=selected_site)
    site_name_combobox['values'] = sites_list
    site_name_combobox.pack(side="left", fill="x", expand=True, padx=(0, 10))  # Remplir l'espace disponible

    def submit_remove_site():
        selected_site_value = selected_site.get()
        if not selected_site_value:
            messagebox.showerror("Erreur", "Veuillez sélectionner un site.")
            return

        remove_site(config_file, selected_site_value, sftp, remote_path)
        remove_window.destroy()

    submit_button = tk.Button(form_frame, text="Supprimer", command=submit_remove_site, bg="red", fg="white")
    submit_button.pack(pady=10, fill="x")

def show_view_sites_form(root, config_file):
    """Afficher la liste des sites existants avec un défilement."""
    view_window = tk.Toplevel(root)
    view_window.title("Sites existants")
    view_window.geometry("400x300")

    # Centrez la fenêtre
    center_window(view_window, 400, 300)

    form_frame = tk.Frame(view_window)
    form_frame.pack(fill="both", expand=True)

    config = read_config(config_file)

    sites_text = tk.Text(form_frame, wrap="word", height=10, width=40)
    sites_text.pack(side="left", fill="both", expand=True)

    scrollbar = tk.Scrollbar(form_frame, orient="vertical", command=sites_text.yview)
    scrollbar.pack(side="right", fill="y")

    sites_text.configure(yscrollcommand=scrollbar.set)

    for section in config.sections():
        site_info = f"Site: {section}\n" \
                    f"Nom d'utilisateur: {config[section]['username']}\n" \
                    f"Mot de passe: {config[section]['password']}\n\n"
        sites_text.insert(tk.END, site_info)

    sites_text.configure(state="disabled")

def main():
    config_file = "sites.ini"
    remote_path = "/home/ubuntu/CEpublicationEXPL/config/sites.ini"
    hostname = "51.254.35.169"
    port = 22
    username = "ubuntu"
    password = "AvMzBKeBkzCT"

    # Configuration de la fenêtre principale
    root = tk.Tk()
    root.title("Gestion des sites")
    root.geometry("400x250")

    # Centrez la fenêtre principale
    center_window(root, 400, 250)

    main_frame = tk.Frame(root, padx=20, pady=20)
    main_frame.pack(expand=True, fill="both")

    # Connexion au serveur distant
    sftp = connect_sftp(hostname, port, username, password)
    download_config_file(sftp, remote_path, config_file)

    add_site_button = tk.Button(main_frame, text="Ajouter un site", command=lambda: show_add_site_form(root, config_file, sftp, remote_path), bg="blue", fg="white", width=20)
    remove_site_button = tk.Button(main_frame, text="Supprimer un site", command=lambda: show_remove_site_form(root, config_file, sftp, remote_path), bg="red", fg="white", width=20)    
    view_sites_button = tk.Button(main_frame, text="Visualiser les sites", command=lambda: show_view_sites_form(root, config_file), bg="orange", fg="white", width=20)
    quit_button = tk.Button(main_frame, text="Quitter", command=root.quit, bg="grey", fg="white", width=20)

    add_site_button.pack(pady=10)
    remove_site_button.pack(pady=10)
    view_sites_button.pack(pady=10)
    quit_button.pack(pady=10)

    def on_closing():
        # Upload du fichier de configuration modifié sur le serveur distant
        upload_config_file(sftp, config_file, remote_path)
        sftp.close()
        root.quit()

    root.protocol("WM_DELETE_WINDOW", on_closing)
    root.mainloop()

if __name__ == "__main__":
    main()

# Nécéssite : pip install paramiko
# pip install scp
