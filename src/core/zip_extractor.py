import sys
import os
import subprocess
from utils.database_utils import log_to_database
from utils.excel_utils import remove_ok_status_rows
from datetime import datetime


def call_another_program(repertoire, mail, mail_password, subject, num_boucle, periode):
    """
    Appeler un autre programme et transmettre les données.

    :param repertoire (String): Chemin vers le répertoire contenant les données.
    :param mail (String): Adresse e-mail destinataire pour le mail de fin
    :param mail_password (String): Mot de passe associé à l'adresse e-mail.
    :param subject (String): Objet de l'e-mail.
    :param num_boucle (int): Numéro de la boucle d'autoconsommation.
    :param periode (str): Période (dateDebut_dateFin).
    """
    # Définit le chemin du programme à exécuter
    program_path = "/home/ubuntu/CEpublicationEXPL/src/cli/data_processor_cli.py"
    # Prépare les arguments à passer au programme
    args = [repertoire, mail, mail_password, subject, num_boucle, periode]

    try:
        # Exécute le programme externe en passant les arguments
        subprocess.run(["python3", program_path, *args], check=True)
    except subprocess.CalledProcessError as e:
        # Gère les erreurs en cas de problème lors de l'exécution du programme
        log_to_database(num_boucle, periode, datetime.now(), "", f"Erreur lors de l'appel du programme externe 'data_processor.py' : {e}", 2, "ERROR")


def main():
    """
    Fonction principale du programme de décompression de fichier ZIP et de suppression des lignes dans un fichier Excel.

    Cette fonction effectue les étapes suivantes :
    1. Vérifie que le nombre d'arguments fournis en ligne de commande est correct. Si ce n'est pas le cas, affiche un
       message d'utilisation et quitte le programme.
    2. Récupère les arguments de la ligne de commande (mot de passe, répertoire, adresse e-mail, mot de passe e-mail,
       objet de l'e-mail).
    3. Essaie de décompresser le fichier 'export.zip' dans le répertoire spécifié en utilisant le mot de passe fourni.
    4. Supprime les lignes avec STATUS valant 'OK' dans le fichier Excel 'tableMail.xlsx' (supprime les couples).
    5. Appelle la fonction `call_another_program` en passant le répertoire, l'adresse e-mail, le mot de passe e-mail
       et l'objet de l'e-mail.

    :return: None
    """
    # Vérifie que le nombre d'arguments fournis en ligne de commande est correct.
    if len(sys.argv) != 8:
        print("Utilisation : python3 script.py <mdp> <repertoire> <mail> <mail_password> <subject> <num_boucle> <periode>")
        sys.exit(1)
    
    # Récupère les arguments de la ligne de commande
    mdp = sys.argv[1]
    repertoire = sys.argv[2]
    mail = sys.argv[3]
    mail_password = sys.argv[4]
    subject = sys.argv[5]
    num_boucle = sys.argv[6]
    periode = sys.argv[7]
        
    # Enregistre un message avec les valeurs du mot de passe et du répertoire
    log_to_database(num_boucle, periode, datetime.now(), "zip_extractor.py", f"Nouveau programme démarré avec MDP : {mdp} et Répertoire : {repertoire}", 1, "INFO")
    
    try:
        # Décompresse le fichier 'export.zip' dans le répertoire spécifié en utilisant le mot de passe fourni
        os.chdir(repertoire)
        result = subprocess.run(["7z", "x", "export.zip", f"-p{mdp}", "-r"], check=True)
        log_to_database(num_boucle, periode, datetime.now(), "export.zip", "Décompression du dossier compressé réussie.", 1, "INFO")
    except subprocess.CalledProcessError as e:
        # Enregistre un message d'erreur dans le journal et affiche l'erreur en cas d'échec de la décompression
        log_to_database(num_boucle, periode, datetime.now(), "export.zip", f"Erreur lors de la décompression : {e}", 2, "ERROR")
        return
    
    # Supprime les lignes avec STATUS valant 'OK' dans le fichier Excel
    remove_ok_status_rows("/home/ubuntu/CEpublicationEXPL/data/input/tableMail.xlsx", num_boucle, periode)
    
    # Change le répertoire de travail
    os.chdir("/home/ubuntu/CEpublicationEXPL/src")
    
    # Appelle la fonction `call_another_program` en passant les arguments requis
    call_another_program(repertoire, mail, mail_password, subject, num_boucle, periode)
