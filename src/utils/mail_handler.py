import os
import subprocess
from utils.regex_utils import extract_boucle_num, extract_dates, extract_password
from utils.excel_utils import write_to_excel, find_matching_entries
from utils.email_utils import extract_email_body, decode_email_subject, fetch_emails_since_last_check
from utils.file_utils import create_directory, move_zip_to_directory
from utils.imap_utils import connect_to_imap, disconnect_from_imap
from utils.config_utils import read_config
from utils.database_utils import log_to_database
from datetime import datetime

def process_emails(emails, config, config_sites):
    """
    Traiter les e-mails reçus.

    :param emails: Liste des e-mails à traiter.
    :param config: Objet ConfigParser contenant les paramètres de configuration du fichier config.ini.
    :param config_sites: Objet ConfigParser contenant les paramètres de configuration du fichier sites.ini.

    Cette fonction effectue les étapes suivantes pour chaque e-mail reçu :
    1. Récupère les paramètres de configuration nécessaires à partir des objets ConfigParser.
    2. Pour chaque e-mail :
        a. Vérifie si l'expéditeur correspond à l'expéditeur attendu.
        b. Décode le sujet de l'e-mail.
        c. Extrait le numéro de boucle et les dates de début et de fin à partir du sujet.
        d. Si les informations de numéro de boucle et de dates sont disponibles :
            i. Construit le chemin du répertoire de destination en fonction de ces informations.
            ii. Crée le répertoire s'il n'existe pas.
            iii. Déplace le fichier ZIP contenu dans l'e-mail vers le répertoire de destination.
        e. Si un mot-clé spécifique est présent dans le sujet, extrait le mot de passe du corps de l'e-mail.
        f. Écrit les informations de numéro de boucle, dates et mot de passe dans un fichier Excel.
        g. Cherche une entrée correspondante / un couple dans un autre fichier Excel.
        h. Si une entrée correspondante est trouvée, appelle un autre programme en passant le mot de passe et le répertoire.
    """
    # Récupère le dossier de destination à partir du fichier de configuration
    destination_folder = config.get('Destination', 'folder')
    # Récupère le mot-clé du sujet de l'e-mail à partir du fichier de configuration
    subject_keyword = config.get('Mail', 'subject_keyword')
    # Récupère l'expéditeur attendu à partir du fichier de configuration
    mail_sender = config.get('Mail', 'sender')
    
    # Récupère le nom d'utilisateur et le mot de passe du site à partir du fichier de configuration
    mail = config_sites.get('username')
    mail_password = config_sites.get('password')
    
    for email in emails:
        sender = email['From']
        if '<' in sender and '>' in sender:
            sender = sender.split('<')[1].split('>')[0]
        else:
            pass
        
        # Vérifie si l'expéditeur de l'e-mail correspond à l'expéditeur attendu
        if sender == mail_sender:
            # Décode le sujet de l'e-mail
            subject = decode_email_subject(email['Subject'])
            subject = subject.replace('\xa0', ' ')
            
            # Extrait le numéro de boucle et les dates du sujet de l'e-mail
            num_boucle = extract_boucle_num(subject)
            date_debut, date_fin = extract_dates(subject, num_boucle)
            periode = f"{date_debut}_{date_fin}"
            
            # Vérifie si l'objet de l'email commence par 'PubliExploit'
            if subject.startswith('PubliExploit'):
                # Si c'est le cas, passer au prochain site
                return
            
            folder_path = None
            # Si les informations de boucle et de dates sont disponibles, continuer le traitement
            if num_boucle and date_debut and date_fin:
                # Construit le chemin du répertoire en fonction du numéro de boucle et des dates
                folder_name = f"{num_boucle}_{date_debut.replace('/', '')}_{date_fin.replace('/', '')}"
                folder_path = os.path.join(destination_folder, folder_name)

                # Crée le répertoire s'il n'existe pas
                create_directory(folder_path)
                
                # Déplace le fichier ZIP contenu dans l'e-mail vers le répertoire de destination
                zip_filename = config['Mail']['compressed_filename']
                move_zip_to_directory(email, folder_path, zip_filename, num_boucle, periode)
            
            password = None
            # Si le mot-clé spécifique est présent dans le sujet, extrait le mot de passe du corps de l'e-mail
            if subject_keyword in subject:
                # Extrait le corps de l'e-mail
                email_body = extract_email_body(email, num_boucle, periode)
                print("Email body")
                print(email_body)
                # Extrait le mot de passe du corps de l'e-mail
                password = extract_password(email, email_body.strip(), num_boucle, periode)
                print("MOT DE PASSE : ", password)
                if password:
                    log_to_database(num_boucle, periode, datetime.now(), "", "Mot de passe extrait du mail avec succès.", 1, "INFO")
                 
            # Si les informations de boucle et de dates sont disponibles, écrit ces informations dans un fichier Excel
            if num_boucle and date_debut and date_fin:
                write_to_excel("/home/ubuntu/CEpublicationEXPL/data/input/tableMail.xlsx", num_boucle, date_debut, date_fin, password, folder_path)
    
            # Vérifie si le logger est configuré avant de chercher un couple correspondant dans le fichier Excel
            #if logger:
                # Cherche un couple dans le fichier Excel, renvoie le mot de passe et le répertoire si un couple est trouvé
                mdp, repertoire = find_matching_entries("/home/ubuntu/CEpublicationEXPL/data/input/tableMail.xlsx", num_boucle, periode)
                if mdp and repertoire:
                    # Change le répertoire de travail
                    os.chdir("/home/ubuntu/CEpublicationEXPL/src")
                    
                    # Appelle un autre programme en passant le mot de passe et le répertoire
                    call_another_program(mdp, repertoire, mail, mail_password, subject, num_boucle, periode)

                

def call_another_program(mdp, repertoire, mail, mail_password, subject, num_boucle, periode):
    """
    Appeler un autre programme et transmettre les données.

    :param mdp (String): Mot de passe pour décrypter le dossier compressé
    :param repertoire (String): Chemin vers le répertoire contenant les données.
    :param mail (String): Adresse e-mail destinataire pour le mail de fin
    :param mail_password (String): Mot de passe associé à l'adresse e-mail.
    :param subject (String): Objet de l'e-mail.
    :param num_boucle (int): Numéro de la boucle d'autoconsommation.
    :param periode (str): Période (dateDebut_dateFin).
    """
    # Définit le chemin du programme à exécuter
    program_path = "/home/ubuntu/CEpublicationEXPL/src/cli/zip_extractor_cli.py"
    # Prépare les arguments à passer au programme
    args = [mdp, repertoire, mail, mail_password, subject, num_boucle, periode]
    
    try:
        # Exécute le programme externe en passant les arguments
        subprocess.run(["python3", program_path, *args], check=True)
    except subprocess.CalledProcessError as e:
        # Gère les erreurs en cas de problème lors de l'exécution du programme
        log_to_database(num_boucle, periode, datetime.now(), "", f"Erreur lors de l'appel du programme externe 'zip_extractor.py' ': {e}", 2, "ERROR")
        

def main(config_file, config_file_sites):
    """
    Fonction principale du programme.

    Cette fonction gère la connexion aux serveurs IMAP de différents sites, récupère les nouveaux emails, les traite et se
    déconnecte des serveurs. Elle utilise les paramètres de configuration stockés dans les fichiers `main_config.ini` et `sites.ini`.

    :param config_file: Chemin vers le fichier de configuration `main_config.ini`.
    :param config_file_sites: Chemin vers le fichier de configuration `sites.ini`.

    Cette fonction effectue les étapes suivantes :
    1. Elle charge les paramètres de configuration à partir des fichiers `main_config.ini` et `sites.ini` en appelant la fonction
       `read_config`.
    2. Pour chaque section (c'est-à-dire chaque site) trouvée dans le fichier `sites.ini`, elle effectue les étapes suivantes :
        a. Se connecte au serveur IMAP du site en utilisant les paramètres de configuration en appelant la fonction
           `connect_to_imap`.
        b. Récupère les nouveaux emails reçus depuis la dernière vérification en appelant la fonction `fetch_emails_since_last_check`.
        c. Traite ces nouveaux emails en appelant la fonction `process_emails`.
        d. Se déconnecte du serveur IMAP en appelant la fonction `disconnect_from_imap`.
        e. Attend 30 secondes (cette ligne est commentée) avant de passer au site suivant.
    """
    try:
        # Charger les paramètres de configuration depuis le fichier config.ini
        config = read_config(config_file)
        
        # Charger les paramètres de configuration depuis le fichier sites.ini
        sites_config = read_config(config_file_sites)
        
        # Itérer sur chaque section du fichier sites.ini
        for site_name in sites_config.sections():
            print("Site name : ", site_name)
            site_config = sites_config[site_name]

            # Se connecter au serveur IMAP
            mail = connect_to_imap(config, site_config)

            # Récupérer les e-mails reçus depuis la dernière vérification
            emails = fetch_emails_since_last_check(mail)

            # Traiter les e-mails
            process_emails(emails, config, site_config)

            # Se déconnecter du serveur IMAP
            disconnect_from_imap(mail)

    except Exception as e:
        print("Une erreur s'est produite lors du lancement du programme: %s", e)

